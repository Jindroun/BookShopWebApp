// <auto-generated />
using System;
using DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    [Migration("20250614190059_sqlservermigration")]
    partial class sqlservermigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Springfield",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4098),
                            PostalCode = "12345",
                            Street = "456 Oak Street",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4099),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Rivertown",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4105),
                            PostalCode = "23456",
                            Street = "789 Maple Avenue",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4105),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "Lakeside",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4107),
                            PostalCode = "34567",
                            Street = "101 Pine Road",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4108),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            City = "Greenfield",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4109),
                            PostalCode = "98765",
                            Street = "202 Cedar Boulevard",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4110),
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            City = "Willowtown",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4111),
                            PostalCode = "56789",
                            Street = "303 Birch Lane",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4112),
                            UserId = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AuditLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AuthorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3874),
                            FirstName = "George",
                            LastName = "Orwell",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3920)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3923),
                            FirstName = "J.R.R.",
                            LastName = "Tolkien",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3923)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3925),
                            FirstName = "J.K.",
                            LastName = "Rowling",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3925)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3927),
                            FirstName = "Stephen",
                            LastName = "King",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3927)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3929),
                            FirstName = "Agatha",
                            LastName = "Christie",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3929)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("Isbn")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4036),
                            Description = "A dystopian novel set in a totalitarian regime, where Big Brother watches over all citizens.",
                            GenreId = 1,
                            Isbn = "9780451524935",
                            PublisherId = 1,
                            Title = "1984",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4037)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4042),
                            Description = "An epic fantasy trilogy following the journey to destroy the One Ring and defeat the dark lord Sauron.",
                            GenreId = 2,
                            Isbn = "9780618640157",
                            PublisherId = 2,
                            Title = "The Lord of the Rings",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4043)
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4045),
                            Description = "The first book in the Harry Potter series, introducing the young wizard and his journey at Hogwarts.",
                            GenreId = 2,
                            Isbn = "9780747532743",
                            PublisherId = 3,
                            Title = "Harry Potter and the Philosopher's Stone",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4045)
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4047),
                            Description = "A psychological horror novel about a family's terrifying experience in a haunted hotel.",
                            GenreId = 4,
                            Isbn = "9780307743657",
                            PublisherId = 4,
                            Title = "The Shining",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4047)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookGenreEntity", b =>
                {
                    b.Property<int>("SecondaryBooksId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryGenresId")
                        .HasColumnType("int");

                    b.HasKey("SecondaryBooksId", "SecondaryGenresId");

                    b.HasIndex("SecondaryGenresId");

                    b.ToTable("BookGenres");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CouponCodeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GiftCardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("GiftCardId");

                    b.ToTable("CouponCodes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3960),
                            Name = "Science Fiction",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3961)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3964),
                            Name = "Fantasy",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3965)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3966),
                            Name = "Mystery",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3967)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3989),
                            Name = "Horror",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(3990)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.GiftCardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GiftCards");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.LocalIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "570c90fe-aef7-45c1-9b43-4cc6923c6ad5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "385ce48a-4545-4add-b173-7d6bfc129711",
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b420cc0-ed41-472c-8c77-c13f52f7a3d1",
                            TwoFactorEnabled = false,
                            UserId = 1,
                            UserName = "john.doe@example.com"
                        },
                        new
                        {
                            Id = "2a7fd365-97c0-4ec0-a434-0e620428a37e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01488ffc-9263-4a9a-8981-a542e46d01b3",
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d474cd4d-af1c-4382-bedd-0b15d8bb8e3c",
                            TwoFactorEnabled = false,
                            UserId = 2,
                            UserName = "jane.smith@example.com"
                        },
                        new
                        {
                            Id = "fd2186e7-06f3-4c6e-8484-12b3b29ec79e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "882d58a5-4d5c-465a-99ed-ef6ee9556b00",
                            Email = "alex.johnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "914bb1c2-0f0a-4d2b-9f7b-6e67ac394cb1",
                            TwoFactorEnabled = false,
                            UserId = 3,
                            UserName = "alex.johnson@example.com"
                        },
                        new
                        {
                            Id = "3d7b0b9c-5fac-4055-915e-af01f46bf526",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "624088cb-4aa5-42fe-bf79-66993decf3a0",
                            Email = "emily.davis@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9220cd8c-5868-4273-86b6-e2e55e678273",
                            TwoFactorEnabled = false,
                            UserId = 4,
                            UserName = "emily.davis@example.com"
                        },
                        new
                        {
                            Id = "5f7b8d3e-9833-44d1-b24c-8a9ec4a2da71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95e65a99-b0fb-45f4-83a4-ceb5d1d6295b",
                            Email = "michael.brown@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8d4bb84-c122-424d-b74b-63976bd27476",
                            TwoFactorEnabled = false,
                            UserId = 5,
                            UserName = "michael.brown@example.com"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("CouponCodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlacedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CouponCodeId")
                        .IsUnique()
                        .HasFilter("[CouponCodeId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4369),
                            PlacedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = 1,
                            TotalPrice = 40m,
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4370),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4376),
                            PlacedDate = new DateTime(2000, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = 3,
                            TotalPrice = 48m,
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4377),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4379),
                            PlacedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = 4,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4379),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderItemEntity", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ShopItemId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerItem")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ShopItemId");

                    b.HasIndex("ShopItemId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ShopItemId = 1,
                            Count = 2,
                            PricePerItem = 10m
                        },
                        new
                        {
                            OrderId = 1,
                            ShopItemId = 2,
                            Count = 1,
                            PricePerItem = 20m
                        },
                        new
                        {
                            OrderId = 2,
                            ShopItemId = 3,
                            Count = 3,
                            PricePerItem = 16m
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PublisherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4013),
                            Name = "Penguin Random House",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4014)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4016),
                            Name = "HarperCollins",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4017)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4018),
                            Name = "Simon & Schuster",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4019)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4020),
                            Name = "Hachette Livre",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4020)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.RatingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4130),
                            Note = "A chilling depiction of a dystopian future.",
                            StarRating = 5,
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4131),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4136),
                            Note = "An epic journey filled with lore and adventure.",
                            StarRating = 5,
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4137),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4138),
                            Note = "A magical beginning to an iconic series.",
                            StarRating = 5,
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4139),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4140),
                            Note = "A terrifying descent into madness.",
                            StarRating = 4,
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4141),
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            BookId = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4142),
                            Note = "Thought-provoking and eerily relevant.",
                            StarRating = 5,
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4143),
                            UserId = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ShopItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("ShopItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4186),
                            Price = 10m,
                            Stock = 100,
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4187)
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4194),
                            Price = 20m,
                            Stock = 50,
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4194)
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4196),
                            Price = 15m,
                            Stock = 75,
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4197)
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4198),
                            Price = 12m,
                            Stock = 0,
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4199)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4065),
                            FirstName = "John",
                            LastName = "Doe",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4066)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4073),
                            FirstName = "Jane",
                            LastName = "Smith",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4074)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4075),
                            FirstName = "Alex",
                            LastName = "Johnson",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4076)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4077),
                            FirstName = "Emily",
                            LastName = "Davis",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4078)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4080),
                            FirstName = "Michael",
                            LastName = "Brown",
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4080)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.WishlistEntryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4162),
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4163),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4166),
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4167),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4168),
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4169),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookId = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4170),
                            UpdatedAt = new DateTime(2025, 6, 14, 21, 0, 58, 992, DateTimeKind.Local).AddTicks(4171),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AddressEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.UserEntity", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.AuthorEntity", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.GenreEntity", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.PublisherEntity", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookGenreEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.BookEntity", null)
                        .WithMany()
                        .HasForeignKey("SecondaryBooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("SecondaryGenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CouponCodeEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.GiftCardEntity", "GiftCard")
                        .WithMany("CouponCodes")
                        .HasForeignKey("GiftCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GiftCard");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.LocalIdentityUser", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.UserEntity", "User")
                        .WithOne("AccountInfo")
                        .HasForeignKey("DataAccessLayer.Entities.LocalIdentityUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.CouponCodeEntity", "CouponCode")
                        .WithOne("Order")
                        .HasForeignKey("DataAccessLayer.Entities.OrderEntity", "CouponCodeId");

                    b.HasOne("DataAccessLayer.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CouponCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderItemEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.OrderEntity", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.ShopItemEntity", "ShopItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("ShopItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ShopItem");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.RatingEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.BookEntity", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.UserEntity", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ShopItemEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.BookEntity", "Book")
                        .WithOne("ShopItem")
                        .HasForeignKey("DataAccessLayer.Entities.ShopItemEntity", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.WishlistEntryEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.BookEntity", "Book")
                        .WithMany("WishlistEntries")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.UserEntity", "User")
                        .WithMany("WishlistEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AuthorEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookEntity", b =>
                {
                    b.Navigation("ShopItem")
                        .IsRequired();

                    b.Navigation("WishlistEntries");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CouponCodeEntity", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.GenreEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.GiftCardEntity", b =>
                {
                    b.Navigation("CouponCodes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderEntity", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PublisherEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ShopItemEntity", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserEntity", b =>
                {
                    b.Navigation("AccountInfo")
                        .IsRequired();

                    b.Navigation("Addresses");

                    b.Navigation("Orders");

                    b.Navigation("Ratings");

                    b.Navigation("WishlistEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
