// <auto-generated />
using System;
using DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    [Migration("20241231194403_Final-Migration")]
    partial class FinalMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("DataAccessLayer.Entities.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Springfield",
                            Country = "USA",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7729),
                            PostalCode = "12345",
                            Street = "123 Maple Street",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7729),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Shelbyville",
                            Country = "USA",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7734),
                            PostalCode = "23456",
                            Street = "456 Oak Avenue",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7735),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "Ogdenville",
                            Country = "USA",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7738),
                            PostalCode = "34567",
                            Street = "789 Pine Road",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7739),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            City = "North Haverbrook",
                            Country = "USA",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7742),
                            PostalCode = "45678",
                            Street = "321 Birch Boulevard",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7742),
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            City = "Capital City",
                            Country = "USA",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7745),
                            PostalCode = "56789",
                            Street = "654 Cedar Lane",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7746),
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            City = "Springfield",
                            Country = "USA",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7749),
                            PostalCode = "67890",
                            Street = "987 Walnut Street",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7749),
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            City = "Shelbyville",
                            Country = "USA",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7753),
                            PostalCode = "78901",
                            Street = "147 Elm Avenue",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7753),
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            City = "Ogdenville",
                            Country = "USA",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7756),
                            PostalCode = "89012",
                            Street = "258 Poplar Road",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7757),
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            City = "North Haverbrook",
                            Country = "USA",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7760),
                            PostalCode = "90123",
                            Street = "369 Ash Boulevard",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7760),
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            City = "Capital City",
                            Country = "USA",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7763),
                            PostalCode = "01234",
                            Street = "159 Spruce Lane",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7764),
                            UserId = 10
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AuditLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AuthorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7399),
                            FirstName = "George",
                            LastName = "Orwell",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7404)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7408),
                            FirstName = "J.K.",
                            LastName = "Rowling",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7408)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7411),
                            FirstName = "Agatha",
                            LastName = "Christie",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7412)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7415),
                            FirstName = "Stephen",
                            LastName = "King",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7415)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7418),
                            FirstName = "Jane",
                            LastName = "Austen",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7418)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PublisherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("Isbn")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4916),
                            Description = "A dystopian novel set in a totalitarian society.",
                            GenreId = 1,
                            Isbn = "9780451524935",
                            PublisherId = 1,
                            Title = "1984",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4921)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4927),
                            Description = "An allegorical novella reflecting events leading up to the Russian Revolution.",
                            GenreId = 1,
                            Isbn = "9780451526342",
                            PublisherId = 1,
                            Title = "Animal Farm",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4927)
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4931),
                            Description = "The first book in the Harry Potter series.",
                            GenreId = 2,
                            Isbn = "9780439708180",
                            PublisherId = 2,
                            Title = "Harry Potter and the Sorcerer's Stone",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4931)
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4935),
                            Description = "The second book in the Harry Potter series.",
                            GenreId = 2,
                            Isbn = "9780439064873",
                            PublisherId = 2,
                            Title = "Harry Potter and the Chamber of Secrets",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4935)
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4938),
                            Description = "A detective novel featuring Hercule Poirot.",
                            GenreId = 3,
                            Isbn = "9780062693662",
                            PublisherId = 3,
                            Title = "Murder on the Orient Express",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4939)
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4943),
                            Description = "A horror novel about a haunted hotel.",
                            GenreId = 4,
                            Isbn = "9780307743657",
                            PublisherId = 4,
                            Title = "The Shining",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4943)
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4947),
                            Description = "A classic romance novel.",
                            GenreId = 5,
                            Isbn = "9780141439518",
                            PublisherId = 5,
                            Title = "Pride and Prejudice",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4947)
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4957),
                            Description = "Description for Sample Book 8.",
                            GenreId = 3,
                            Isbn = "9780000000008",
                            PublisherId = 4,
                            Title = "Sample Book 8",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4957)
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4962),
                            Description = "Description for Sample Book 9.",
                            GenreId = 4,
                            Isbn = "9780000000009",
                            PublisherId = 5,
                            Title = "Sample Book 9",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4962)
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4967),
                            Description = "Description for Sample Book 10.",
                            GenreId = 5,
                            Isbn = "97800000000010",
                            PublisherId = 1,
                            Title = "Sample Book 10",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4967)
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4971),
                            Description = "Description for Sample Book 11.",
                            GenreId = 6,
                            Isbn = "97800000000011",
                            PublisherId = 2,
                            Title = "Sample Book 11",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4971)
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4974),
                            Description = "Description for Sample Book 12.",
                            GenreId = 1,
                            Isbn = "97800000000012",
                            PublisherId = 3,
                            Title = "Sample Book 12",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4975)
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4978),
                            Description = "Description for Sample Book 13.",
                            GenreId = 2,
                            Isbn = "97800000000013",
                            PublisherId = 4,
                            Title = "Sample Book 13",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4978)
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4982),
                            Description = "Description for Sample Book 14.",
                            GenreId = 3,
                            Isbn = "97800000000014",
                            PublisherId = 5,
                            Title = "Sample Book 14",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4982)
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4985),
                            Description = "Description for Sample Book 15.",
                            GenreId = 4,
                            Isbn = "97800000000015",
                            PublisherId = 1,
                            Title = "Sample Book 15",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4986)
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4989),
                            Description = "Description for Sample Book 16.",
                            GenreId = 5,
                            Isbn = "97800000000016",
                            PublisherId = 2,
                            Title = "Sample Book 16",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4989)
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4993),
                            Description = "Description for Sample Book 17.",
                            GenreId = 6,
                            Isbn = "97800000000017",
                            PublisherId = 3,
                            Title = "Sample Book 17",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4993)
                        },
                        new
                        {
                            Id = 18,
                            AuthorId = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4997),
                            Description = "Description for Sample Book 18.",
                            GenreId = 1,
                            Isbn = "97800000000018",
                            PublisherId = 4,
                            Title = "Sample Book 18",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(4998)
                        },
                        new
                        {
                            Id = 19,
                            AuthorId = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5001),
                            Description = "Description for Sample Book 19.",
                            GenreId = 2,
                            Isbn = "97800000000019",
                            PublisherId = 5,
                            Title = "Sample Book 19",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5001)
                        },
                        new
                        {
                            Id = 20,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5005),
                            Description = "Description for Sample Book 20.",
                            GenreId = 3,
                            Isbn = "97800000000020",
                            PublisherId = 1,
                            Title = "Sample Book 20",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5005)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookGenreEntity", b =>
                {
                    b.Property<int>("SecondaryBooksId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecondaryGenresId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SecondaryBooksId", "SecondaryGenresId");

                    b.HasIndex("SecondaryGenresId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            SecondaryBooksId = 19,
                            SecondaryGenresId = 3
                        },
                        new
                        {
                            SecondaryBooksId = 4,
                            SecondaryGenresId = 4
                        },
                        new
                        {
                            SecondaryBooksId = 11,
                            SecondaryGenresId = 1
                        },
                        new
                        {
                            SecondaryBooksId = 13,
                            SecondaryGenresId = 5
                        },
                        new
                        {
                            SecondaryBooksId = 7,
                            SecondaryGenresId = 1
                        },
                        new
                        {
                            SecondaryBooksId = 17,
                            SecondaryGenresId = 5
                        },
                        new
                        {
                            SecondaryBooksId = 1,
                            SecondaryGenresId = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CouponCodeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("GiftCardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("GiftCardId");

                    b.ToTable("CouponCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "l0wzxv",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7539),
                            GiftCardId = 1,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7540)
                        },
                        new
                        {
                            Id = 2,
                            Code = "j544yn",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7562),
                            GiftCardId = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7563)
                        },
                        new
                        {
                            Id = 3,
                            Code = "0im2p4",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7570),
                            GiftCardId = 5,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7570)
                        },
                        new
                        {
                            Id = 4,
                            Code = "80cg52",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7578),
                            GiftCardId = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7578)
                        },
                        new
                        {
                            Id = 5,
                            Code = "ps40x5",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7585),
                            GiftCardId = 2,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7585)
                        },
                        new
                        {
                            Id = 6,
                            Code = "khtu2s",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7593),
                            GiftCardId = 5,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7594)
                        },
                        new
                        {
                            Id = 7,
                            Code = "i0jtpq",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7600),
                            GiftCardId = 5,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7600)
                        },
                        new
                        {
                            Id = 8,
                            Code = "rp8h0m",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7606),
                            GiftCardId = 3,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7606)
                        },
                        new
                        {
                            Id = 9,
                            Code = "6whcmh",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7613),
                            GiftCardId = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7614)
                        },
                        new
                        {
                            Id = 10,
                            Code = "32qyft",
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7621),
                            GiftCardId = 3,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 699, DateTimeKind.Utc).AddTicks(7621)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7496),
                            Name = "Science Fiction",
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7496)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7500),
                            Name = "Fantasy",
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7501)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7503),
                            Name = "Mystery",
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7504)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7507),
                            Name = "Horror",
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7507)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7510),
                            Name = "Romance",
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7510)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7537),
                            Name = "Non-Fiction",
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7537)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.GiftCardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Discount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GiftCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8138),
                            Discount = 411.611015554923367m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8139),
                            ValidFrom = new DateTime(2022, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8133),
                            ValidTo = new DateTime(2024, 12, 9, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8135)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8153),
                            Discount = 286.73494870765435m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8153),
                            ValidFrom = new DateTime(2022, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8152),
                            ValidTo = new DateTime(2026, 11, 17, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8152)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8157),
                            Discount = 437.629309947708743m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8157),
                            ValidFrom = new DateTime(2022, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8156),
                            ValidTo = new DateTime(2025, 5, 15, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8157)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8161),
                            Discount = 175.423499310643607m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8162),
                            ValidFrom = new DateTime(2022, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8161),
                            ValidTo = new DateTime(2024, 9, 17, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8161)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8165),
                            Discount = 273.307363420679901m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8166),
                            ValidFrom = new DateTime(2022, 12, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8165),
                            ValidTo = new DateTime(2027, 1, 31, 19, 44, 2, 698, DateTimeKind.Utc).AddTicks(8165)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.LocalIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a64dcb54-e9d2-43bb-bd86-6c1911daf672",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8f81230-4386-4846-855d-f5d36b5d515a",
                            Email = "alice1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ALICE1@EXAMPLE.COM",
                            NormalizedUserName = "ALICE1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3iUOGi/FOJZkTqXbWrX5IDHphusbdW5W+V6Z9FfrGXX4jwVYa3asxD2PZDBFVq8A==",
                            PhoneNumber = "(411) 374-8704",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f53929f4-78a5-41d3-ae35-8cfc4d49286f",
                            TwoFactorEnabled = false,
                            UserId = 1,
                            UserName = "alice1@example.com"
                        },
                        new
                        {
                            Id = "3563f841-af9b-4e50-a285-3d84680d5089",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b85becfa-a715-4bb8-8fce-c1febe87920f",
                            Email = "bob2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "BOB2@EXAMPLE.COM",
                            NormalizedUserName = "BOB2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3iUOGi/FOJZkTqXbWrX5IDHphusbdW5W+V6Z9FfrGXX4jwVYa3asxD2PZDBFVq8A==",
                            PhoneNumber = "(415) 730-8184 x8606",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f7f9cc4-fb96-4606-8dad-5a332764703b",
                            TwoFactorEnabled = false,
                            UserId = 2,
                            UserName = "bob2@example.com"
                        },
                        new
                        {
                            Id = "02eef335-c8e8-4059-a7db-edd48bb2c20d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cacfc3a6-c155-4e16-8990-3cf7143a12a9",
                            Email = "charlie3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CHARLIE3@EXAMPLE.COM",
                            NormalizedUserName = "CHARLIE3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3iUOGi/FOJZkTqXbWrX5IDHphusbdW5W+V6Z9FfrGXX4jwVYa3asxD2PZDBFVq8A==",
                            PhoneNumber = "994-306-6529",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8ce80cd-b551-4cda-9069-4ddd98c273e5",
                            TwoFactorEnabled = false,
                            UserId = 3,
                            UserName = "charlie3@example.com"
                        },
                        new
                        {
                            Id = "6a966b4a-9358-4a51-9dcc-47bbcfc2119e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2821ff85-a55e-4dc7-8bc1-272f8e14cc6d",
                            Email = "diana4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "DIANA4@EXAMPLE.COM",
                            NormalizedUserName = "DIANA4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3iUOGi/FOJZkTqXbWrX5IDHphusbdW5W+V6Z9FfrGXX4jwVYa3asxD2PZDBFVq8A==",
                            PhoneNumber = "1-989-244-6794 x6915",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56ef8a8e-dacb-4053-a48c-1755d74cc4e3",
                            TwoFactorEnabled = false,
                            UserId = 4,
                            UserName = "diana4@example.com"
                        },
                        new
                        {
                            Id = "4d4e4d59-a2ff-4be6-9077-03aba764bf89",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5da0368e-01dc-4689-bdc5-685f209bc471",
                            Email = "ethan5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ETHAN5@EXAMPLE.COM",
                            NormalizedUserName = "ETHAN5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3iUOGi/FOJZkTqXbWrX5IDHphusbdW5W+V6Z9FfrGXX4jwVYa3asxD2PZDBFVq8A==",
                            PhoneNumber = "1-605-982-6644 x880",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3f211d8-6f0a-463e-9ed9-5835da525f40",
                            TwoFactorEnabled = false,
                            UserId = 5,
                            UserName = "ethan5@example.com"
                        },
                        new
                        {
                            Id = "38ddd96c-c339-4244-9b24-e682cfab7040",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60f97780-8fcb-4074-a7c5-dda6455b7964",
                            Email = "fiona6@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "FIONA6@EXAMPLE.COM",
                            NormalizedUserName = "FIONA6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3iUOGi/FOJZkTqXbWrX5IDHphusbdW5W+V6Z9FfrGXX4jwVYa3asxD2PZDBFVq8A==",
                            PhoneNumber = "1-760-642-2280 x284",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e17a6fcc-4b31-4762-9788-1ae08fe215d5",
                            TwoFactorEnabled = false,
                            UserId = 6,
                            UserName = "fiona6@example.com"
                        },
                        new
                        {
                            Id = "ac5c7bbd-e7e2-4088-84a8-0b9f0ffd34eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b6a63b2-5a05-4f0b-9e7c-d015711ed993",
                            Email = "george7@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "GEORGE7@EXAMPLE.COM",
                            NormalizedUserName = "GEORGE7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3iUOGi/FOJZkTqXbWrX5IDHphusbdW5W+V6Z9FfrGXX4jwVYa3asxD2PZDBFVq8A==",
                            PhoneNumber = "851-405-2136",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fc30eca-5c2d-400b-b3ee-fe25d6d858f4",
                            TwoFactorEnabled = false,
                            UserId = 7,
                            UserName = "george7@example.com"
                        },
                        new
                        {
                            Id = "0a6f9da9-8b31-4937-a03d-0045a1a69db7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "790c5854-f673-4b19-ae0b-206e9ca8b9f3",
                            Email = "hannah8@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "HANNAH8@EXAMPLE.COM",
                            NormalizedUserName = "HANNAH8@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3iUOGi/FOJZkTqXbWrX5IDHphusbdW5W+V6Z9FfrGXX4jwVYa3asxD2PZDBFVq8A==",
                            PhoneNumber = "1-527-753-7331",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e9153e0-98b3-48ba-9ad4-e4f8448a426f",
                            TwoFactorEnabled = false,
                            UserId = 8,
                            UserName = "hannah8@example.com"
                        },
                        new
                        {
                            Id = "5f255236-58a1-408d-902d-06c2c4a1eca1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "674addb3-8a61-40f5-b496-2da7560bf039",
                            Email = "ian9@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "IAN9@EXAMPLE.COM",
                            NormalizedUserName = "IAN9@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3iUOGi/FOJZkTqXbWrX5IDHphusbdW5W+V6Z9FfrGXX4jwVYa3asxD2PZDBFVq8A==",
                            PhoneNumber = "481.690.4816 x288",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e83e0c59-2587-4a8e-bca3-1f83ba9c33ca",
                            TwoFactorEnabled = false,
                            UserId = 9,
                            UserName = "ian9@example.com"
                        },
                        new
                        {
                            Id = "18753094-b6aa-40a2-84b8-02463e5209b4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fa30bae-e88d-4533-9cdb-d4f053a0f135",
                            Email = "julia10@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "JULIA10@EXAMPLE.COM",
                            NormalizedUserName = "JULIA10@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3iUOGi/FOJZkTqXbWrX5IDHphusbdW5W+V6Z9FfrGXX4jwVYa3asxD2PZDBFVq8A==",
                            PhoneNumber = "1-780-469-0640 x9764",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "457ba98d-8a5f-41e3-b799-4b90d0071b5f",
                            TwoFactorEnabled = false,
                            UserId = 10,
                            UserName = "julia10@example.com"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CouponCodeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlacedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CouponCodeId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8428),
                            PlacedDate = new DateTime(2024, 11, 30, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8422),
                            State = 1,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8430),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 7,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8560),
                            PlacedDate = new DateTime(2023, 6, 30, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8458),
                            State = 3,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8561),
                            UserId = 7
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 8,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8571),
                            PlacedDate = new DateTime(2024, 5, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8566),
                            State = 3,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8571),
                            UserId = 8
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 6,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8578),
                            PlacedDate = new DateTime(2024, 10, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8575),
                            State = 0,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8578),
                            UserId = 6
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 8,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8584),
                            PlacedDate = new DateTime(2024, 8, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8582),
                            State = 4,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8585),
                            UserId = 8
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8591),
                            PlacedDate = new DateTime(2023, 2, 28, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8589),
                            State = 3,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8592),
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 9,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8597),
                            PlacedDate = new DateTime(2024, 9, 30, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8596),
                            State = 0,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8598),
                            UserId = 9
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8602),
                            PlacedDate = new DateTime(2024, 10, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8601),
                            State = 0,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8603),
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            AddressId = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8608),
                            PlacedDate = new DateTime(2024, 3, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8606),
                            State = 3,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8608),
                            UserId = 5
                        },
                        new
                        {
                            Id = 10,
                            AddressId = 9,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8614),
                            PlacedDate = new DateTime(2023, 11, 30, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8612),
                            State = 0,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8615),
                            UserId = 9
                        },
                        new
                        {
                            Id = 11,
                            AddressId = 9,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8620),
                            PlacedDate = new DateTime(2023, 6, 30, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8618),
                            State = 3,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8620),
                            UserId = 9
                        },
                        new
                        {
                            Id = 12,
                            AddressId = 7,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8625),
                            PlacedDate = new DateTime(2024, 10, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8624),
                            State = 1,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8626),
                            UserId = 7
                        },
                        new
                        {
                            Id = 13,
                            AddressId = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8630),
                            PlacedDate = new DateTime(2024, 3, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8629),
                            State = 1,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8631),
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            AddressId = 9,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8636),
                            PlacedDate = new DateTime(2024, 5, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8634),
                            State = 4,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8636),
                            UserId = 9
                        },
                        new
                        {
                            Id = 15,
                            AddressId = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8641),
                            PlacedDate = new DateTime(2023, 1, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8640),
                            State = 3,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 695, DateTimeKind.Utc).AddTicks(8642),
                            UserId = 4
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderItemEntity", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShopItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PricePerItem")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId", "ShopItemId");

                    b.HasIndex("ShopItemId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ShopItemId = 1,
                            Count = 2,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 1,
                            ShopItemId = 2,
                            Count = 3,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 2,
                            ShopItemId = 1,
                            Count = 5,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 2,
                            ShopItemId = 2,
                            Count = 1,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 2,
                            ShopItemId = 3,
                            Count = 2,
                            PricePerItem = 22.99m
                        },
                        new
                        {
                            OrderId = 2,
                            ShopItemId = 4,
                            Count = 2,
                            PricePerItem = 23.99m
                        },
                        new
                        {
                            OrderId = 3,
                            ShopItemId = 1,
                            Count = 1,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 3,
                            ShopItemId = 2,
                            Count = 1,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 3,
                            ShopItemId = 3,
                            Count = 2,
                            PricePerItem = 22.99m
                        },
                        new
                        {
                            OrderId = 3,
                            ShopItemId = 4,
                            Count = 4,
                            PricePerItem = 23.99m
                        },
                        new
                        {
                            OrderId = 4,
                            ShopItemId = 1,
                            Count = 1,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 4,
                            ShopItemId = 2,
                            Count = 5,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 4,
                            ShopItemId = 3,
                            Count = 5,
                            PricePerItem = 22.99m
                        },
                        new
                        {
                            OrderId = 5,
                            ShopItemId = 1,
                            Count = 4,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 5,
                            ShopItemId = 2,
                            Count = 2,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 6,
                            ShopItemId = 1,
                            Count = 2,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 6,
                            ShopItemId = 2,
                            Count = 1,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 6,
                            ShopItemId = 3,
                            Count = 5,
                            PricePerItem = 22.99m
                        },
                        new
                        {
                            OrderId = 7,
                            ShopItemId = 1,
                            Count = 3,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 7,
                            ShopItemId = 2,
                            Count = 2,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 7,
                            ShopItemId = 3,
                            Count = 5,
                            PricePerItem = 22.99m
                        },
                        new
                        {
                            OrderId = 7,
                            ShopItemId = 4,
                            Count = 2,
                            PricePerItem = 23.99m
                        },
                        new
                        {
                            OrderId = 7,
                            ShopItemId = 5,
                            Count = 2,
                            PricePerItem = 24.99m
                        },
                        new
                        {
                            OrderId = 8,
                            ShopItemId = 1,
                            Count = 2,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 8,
                            ShopItemId = 2,
                            Count = 3,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 8,
                            ShopItemId = 3,
                            Count = 5,
                            PricePerItem = 22.99m
                        },
                        new
                        {
                            OrderId = 8,
                            ShopItemId = 4,
                            Count = 1,
                            PricePerItem = 23.99m
                        },
                        new
                        {
                            OrderId = 9,
                            ShopItemId = 1,
                            Count = 5,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 9,
                            ShopItemId = 2,
                            Count = 4,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 9,
                            ShopItemId = 3,
                            Count = 2,
                            PricePerItem = 22.99m
                        },
                        new
                        {
                            OrderId = 9,
                            ShopItemId = 4,
                            Count = 2,
                            PricePerItem = 23.99m
                        },
                        new
                        {
                            OrderId = 10,
                            ShopItemId = 1,
                            Count = 4,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 10,
                            ShopItemId = 2,
                            Count = 2,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 11,
                            ShopItemId = 1,
                            Count = 1,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 11,
                            ShopItemId = 2,
                            Count = 5,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 11,
                            ShopItemId = 3,
                            Count = 2,
                            PricePerItem = 22.99m
                        },
                        new
                        {
                            OrderId = 11,
                            ShopItemId = 4,
                            Count = 2,
                            PricePerItem = 23.99m
                        },
                        new
                        {
                            OrderId = 12,
                            ShopItemId = 1,
                            Count = 3,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 12,
                            ShopItemId = 2,
                            Count = 5,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 12,
                            ShopItemId = 3,
                            Count = 3,
                            PricePerItem = 22.99m
                        },
                        new
                        {
                            OrderId = 12,
                            ShopItemId = 4,
                            Count = 4,
                            PricePerItem = 23.99m
                        },
                        new
                        {
                            OrderId = 12,
                            ShopItemId = 5,
                            Count = 5,
                            PricePerItem = 24.99m
                        },
                        new
                        {
                            OrderId = 13,
                            ShopItemId = 1,
                            Count = 3,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 13,
                            ShopItemId = 2,
                            Count = 2,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 13,
                            ShopItemId = 3,
                            Count = 1,
                            PricePerItem = 22.99m
                        },
                        new
                        {
                            OrderId = 14,
                            ShopItemId = 1,
                            Count = 5,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 14,
                            ShopItemId = 2,
                            Count = 2,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 14,
                            ShopItemId = 3,
                            Count = 5,
                            PricePerItem = 22.99m
                        },
                        new
                        {
                            OrderId = 14,
                            ShopItemId = 4,
                            Count = 1,
                            PricePerItem = 23.99m
                        },
                        new
                        {
                            OrderId = 14,
                            ShopItemId = 5,
                            Count = 2,
                            PricePerItem = 24.99m
                        },
                        new
                        {
                            OrderId = 15,
                            ShopItemId = 1,
                            Count = 3,
                            PricePerItem = 20.99m
                        },
                        new
                        {
                            OrderId = 15,
                            ShopItemId = 2,
                            Count = 2,
                            PricePerItem = 21.99m
                        },
                        new
                        {
                            OrderId = 15,
                            ShopItemId = 3,
                            Count = 2,
                            PricePerItem = 22.99m
                        },
                        new
                        {
                            OrderId = 15,
                            ShopItemId = 4,
                            Count = 2,
                            PricePerItem = 23.99m
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PublisherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7562),
                            Name = "Penguin Random House",
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7563)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7566),
                            Name = "HarperCollins",
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7567)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7569),
                            Name = "Simon & Schuster",
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7569)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7572),
                            Name = "Hachette Livre",
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7572)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7575),
                            Name = "Macmillan Publishers",
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7575)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.RatingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StarRating")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7501),
                            Note = "Voluptas est ex expedita velit.\nIn autem ratione provident officia consequatur quia odio.",
                            StarRating = 1,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7502),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7591),
                            Note = "Facere nisi facilis ut vel placeat itaque et nihil dolore.\nNihil similique voluptas quibusdam accusamus aut non quisquam vero quia.",
                            StarRating = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7591),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7634),
                            Note = "Iste ut enim consequatur numquam nemo voluptatem est.\nAut ut autem necessitatibus rerum tempore ex.",
                            StarRating = 1,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7634),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            BookId = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7692),
                            Note = "Et qui enim excepturi repudiandae ad tempora nobis.\nQuo necessitatibus modi et minima aut quaerat.",
                            StarRating = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7693),
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookId = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7725),
                            Note = "Non vero architecto.\nMolestiae alias iure explicabo non esse ullam ut.",
                            StarRating = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7726),
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            BookId = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7782),
                            Note = "Error explicabo animi quo voluptas ut omnis enim.\nNobis voluptatem voluptatem.",
                            StarRating = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7783),
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            BookId = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7822),
                            Note = "Odio est eum id odit velit.\nEnim molestias at ducimus ratione recusandae.",
                            StarRating = 3,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7823),
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            BookId = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7869),
                            Note = "Beatae fuga ab consequatur eligendi eum harum modi consequuntur voluptas.\nDolores sunt magnam possimus et laboriosam laboriosam delectus.",
                            StarRating = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7870),
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            BookId = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7931),
                            Note = "Quibusdam doloremque aspernatur ea amet voluptatem consequatur eveniet eos.\nNeque veniam quaerat voluptatem accusantium pariatur perferendis.",
                            StarRating = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7931),
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            BookId = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7966),
                            Note = "Repellendus dolores unde.\nEaque non est id et.",
                            StarRating = 2,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7966),
                            UserId = 4
                        },
                        new
                        {
                            Id = 11,
                            BookId = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7996),
                            Note = "Eveniet et quis harum vitae officia quam dicta.\nPerspiciatis totam qui est.",
                            StarRating = 1,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(7996),
                            UserId = 4
                        },
                        new
                        {
                            Id = 12,
                            BookId = 6,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8018),
                            Note = "Veniam quos ut aut sit facilis.\nEligendi voluptas ut.",
                            StarRating = 2,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8019),
                            UserId = 4
                        },
                        new
                        {
                            Id = 13,
                            BookId = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8090),
                            Note = "Quod aperiam cupiditate voluptate cum enim facilis.\nQuibusdam voluptatum tempora modi.",
                            StarRating = 2,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8090),
                            UserId = 5
                        },
                        new
                        {
                            Id = 14,
                            BookId = 6,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8116),
                            Note = "Iste repellendus dolores quo sint dolore.\nTempore quis voluptate hic veniam eum.",
                            StarRating = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8117),
                            UserId = 5
                        },
                        new
                        {
                            Id = 15,
                            BookId = 7,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8149),
                            Note = "Qui officiis ipsa voluptatibus suscipit error doloremque ea rerum.\nRem quo praesentium ut.",
                            StarRating = 3,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8150),
                            UserId = 5
                        },
                        new
                        {
                            Id = 16,
                            BookId = 6,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8301),
                            Note = "Eos quas rerum suscipit nihil consequatur aut.\nQui odio ea voluptatem laborum eum ducimus nihil vel nam.",
                            StarRating = 1,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8302),
                            UserId = 6
                        },
                        new
                        {
                            Id = 17,
                            BookId = 7,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8325),
                            Note = "Rerum quibusdam sunt omnis provident et.\nAb laudantium temporibus.",
                            StarRating = 2,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8325),
                            UserId = 6
                        },
                        new
                        {
                            Id = 18,
                            BookId = 8,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8357),
                            Note = "Tempore rerum sed aut.\nTotam fuga laboriosam praesentium fugiat perferendis exercitationem commodi a possimus.",
                            StarRating = 5,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8358),
                            UserId = 6
                        },
                        new
                        {
                            Id = 19,
                            BookId = 7,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8421),
                            Note = "Vero deserunt ipsam esse consequatur doloribus veritatis voluptatibus at.\nNihil repellat totam molestias fugiat in.",
                            StarRating = 3,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8422),
                            UserId = 7
                        },
                        new
                        {
                            Id = 20,
                            BookId = 8,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8458),
                            Note = "Est corporis delectus similique aut aspernatur ut est.\nQuos assumenda quos dolorum voluptatum voluptatem repudiandae praesentium voluptas nemo.",
                            StarRating = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8459),
                            UserId = 7
                        },
                        new
                        {
                            Id = 21,
                            BookId = 9,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8485),
                            Note = "A eligendi animi adipisci et cupiditate.\nLaborum voluptatem qui dolorum unde.",
                            StarRating = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8485),
                            UserId = 7
                        },
                        new
                        {
                            Id = 22,
                            BookId = 8,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8522),
                            Note = "Quis quo cum dolorem qui quis autem.\nDolor quas est assumenda ab.",
                            StarRating = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8523),
                            UserId = 8
                        },
                        new
                        {
                            Id = 23,
                            BookId = 9,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8580),
                            Note = "Maiores aut quo eligendi sed voluptate non molestiae et aliquid.\nVoluptatem eaque similique dolorem velit.",
                            StarRating = 2,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8580),
                            UserId = 8
                        },
                        new
                        {
                            Id = 24,
                            BookId = 10,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8616),
                            Note = "Voluptatem quo et quae nam in officia numquam omnis cumque.\nNon natus ipsum eum sed esse rerum consequatur minus voluptas.",
                            StarRating = 3,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8616),
                            UserId = 8
                        },
                        new
                        {
                            Id = 25,
                            BookId = 9,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8649),
                            Note = "Ut repellendus sed libero quidem aut.\nNihil ut quo vel temporibus.",
                            StarRating = 1,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8649),
                            UserId = 9
                        },
                        new
                        {
                            Id = 26,
                            BookId = 10,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8707),
                            Note = "Voluptas aut impedit.\nOptio ut quo dolor temporibus iste quod totam sit aperiam.",
                            StarRating = 5,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8707),
                            UserId = 9
                        },
                        new
                        {
                            Id = 27,
                            BookId = 11,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8738),
                            Note = "Eaque officia atque illo harum ducimus reiciendis iusto temporibus.\nVitae beatae qui numquam magnam corrupti sed.",
                            StarRating = 2,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8738),
                            UserId = 9
                        },
                        new
                        {
                            Id = 28,
                            BookId = 10,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8777),
                            Note = "Voluptatem deleniti dolor quasi necessitatibus doloribus veritatis.\nCulpa quo eveniet consequuntur ut doloremque voluptatibus.",
                            StarRating = 4,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8777),
                            UserId = 10
                        },
                        new
                        {
                            Id = 29,
                            BookId = 11,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8798),
                            Note = "Veritatis minima dicta dolore totam sit est.\nEt architecto sunt enim.",
                            StarRating = 5,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8798),
                            UserId = 10
                        },
                        new
                        {
                            Id = 30,
                            BookId = 12,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8856),
                            Note = "Suscipit totam enim.\nMollitia molestiae veritatis eligendi vel minus molestias impedit.",
                            StarRating = 1,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 693, DateTimeKind.Utc).AddTicks(8856),
                            UserId = 10
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ShopItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("ShopItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5419),
                            Price = 20.99m,
                            Stock = 101,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5420)
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5424),
                            Price = 21.99m,
                            Stock = 102,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5425)
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5427),
                            Price = 22.99m,
                            Stock = 103,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5428)
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5430),
                            Price = 23.99m,
                            Stock = 104,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5431)
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5433),
                            Price = 24.99m,
                            Stock = 105,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5434)
                        },
                        new
                        {
                            Id = 6,
                            BookId = 6,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5437),
                            Price = 25.99m,
                            Stock = 106,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5437)
                        },
                        new
                        {
                            Id = 7,
                            BookId = 7,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5439),
                            Price = 26.99m,
                            Stock = 107,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5440)
                        },
                        new
                        {
                            Id = 8,
                            BookId = 8,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5442),
                            Price = 27.99m,
                            Stock = 108,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5442)
                        },
                        new
                        {
                            Id = 9,
                            BookId = 9,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5445),
                            Price = 28.99m,
                            Stock = 109,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5445)
                        },
                        new
                        {
                            Id = 10,
                            BookId = 10,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5448),
                            Price = 29.99m,
                            Stock = 110,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5448)
                        },
                        new
                        {
                            Id = 11,
                            BookId = 11,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5451),
                            Price = 30.99m,
                            Stock = 111,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5451)
                        },
                        new
                        {
                            Id = 12,
                            BookId = 12,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5453),
                            Price = 31.99m,
                            Stock = 112,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5453)
                        },
                        new
                        {
                            Id = 13,
                            BookId = 13,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5456),
                            Price = 32.99m,
                            Stock = 113,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5456)
                        },
                        new
                        {
                            Id = 14,
                            BookId = 14,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5458),
                            Price = 33.99m,
                            Stock = 114,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5459)
                        },
                        new
                        {
                            Id = 15,
                            BookId = 15,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5462),
                            Price = 34.99m,
                            Stock = 115,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5462)
                        },
                        new
                        {
                            Id = 16,
                            BookId = 16,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5464),
                            Price = 35.99m,
                            Stock = 116,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5465)
                        },
                        new
                        {
                            Id = 17,
                            BookId = 17,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5467),
                            Price = 36.99m,
                            Stock = 117,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5467)
                        },
                        new
                        {
                            Id = 18,
                            BookId = 18,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5470),
                            Price = 37.99m,
                            Stock = 118,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5471)
                        },
                        new
                        {
                            Id = 19,
                            BookId = 19,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5473),
                            Price = 38.99m,
                            Stock = 119,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5473)
                        },
                        new
                        {
                            Id = 20,
                            BookId = 20,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5475),
                            Price = 39.99m,
                            Stock = 120,
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 692, DateTimeKind.Utc).AddTicks(5476)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7599),
                            FirstName = "Alice",
                            LastName = "Smith",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7599)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7604),
                            FirstName = "Bob",
                            LastName = "Johnson",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7604)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7607),
                            FirstName = "Charlie",
                            LastName = "Williams",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7608)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7610),
                            FirstName = "Diana",
                            LastName = "Brown",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7611)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7614),
                            FirstName = "Ethan",
                            LastName = "Jones",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7614)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7618),
                            FirstName = "Fiona",
                            LastName = "Garcia",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7618)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7621),
                            FirstName = "George",
                            LastName = "Miller",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7622)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7692),
                            FirstName = "Hannah",
                            LastName = "Davis",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7693)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7696),
                            FirstName = "Ian",
                            LastName = "Martinez",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7696)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7699),
                            FirstName = "Julia",
                            LastName = "Hernandez",
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 690, DateTimeKind.Utc).AddTicks(7700)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.WishlistEntryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8659),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8661),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8669),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8669),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8682),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8682),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookId = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8684),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8685),
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookId = 3,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8695),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8695),
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            BookId = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8698),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8699),
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            BookId = 4,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8709),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8709),
                            UserId = 4
                        },
                        new
                        {
                            Id = 8,
                            BookId = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8711),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8712),
                            UserId = 4
                        },
                        new
                        {
                            Id = 9,
                            BookId = 5,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8722),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8722),
                            UserId = 5
                        },
                        new
                        {
                            Id = 10,
                            BookId = 6,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8747),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8748),
                            UserId = 5
                        },
                        new
                        {
                            Id = 11,
                            BookId = 6,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8757),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8758),
                            UserId = 6
                        },
                        new
                        {
                            Id = 12,
                            BookId = 7,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8760),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8760),
                            UserId = 6
                        },
                        new
                        {
                            Id = 13,
                            BookId = 7,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8769),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8770),
                            UserId = 7
                        },
                        new
                        {
                            Id = 14,
                            BookId = 8,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8772),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8773),
                            UserId = 7
                        },
                        new
                        {
                            Id = 15,
                            BookId = 8,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8782),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8782),
                            UserId = 8
                        },
                        new
                        {
                            Id = 16,
                            BookId = 9,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8785),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8785),
                            UserId = 8
                        },
                        new
                        {
                            Id = 17,
                            BookId = 9,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8796),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8796),
                            UserId = 9
                        },
                        new
                        {
                            Id = 18,
                            BookId = 10,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8799),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8799),
                            UserId = 9
                        },
                        new
                        {
                            Id = 19,
                            BookId = 10,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8810),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8810),
                            UserId = 10
                        },
                        new
                        {
                            Id = 20,
                            BookId = 11,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8813),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8813),
                            UserId = 10
                        },
                        new
                        {
                            Id = 21,
                            BookId = 11,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8848),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8849),
                            UserId = 7
                        },
                        new
                        {
                            Id = 22,
                            BookId = 9,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8856),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8856),
                            UserId = 4
                        },
                        new
                        {
                            Id = 23,
                            BookId = 19,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8862),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8862),
                            UserId = 3
                        },
                        new
                        {
                            Id = 24,
                            BookId = 10,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8869),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8869),
                            UserId = 3
                        },
                        new
                        {
                            Id = 25,
                            BookId = 2,
                            CreatedAt = new DateTime(2022, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8875),
                            UpdatedAt = new DateTime(2023, 12, 31, 19, 44, 2, 694, DateTimeKind.Utc).AddTicks(8876),
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AddressEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.UserEntity", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.AuthorEntity", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.GenreEntity", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.PublisherEntity", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookGenreEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.BookEntity", null)
                        .WithMany()
                        .HasForeignKey("SecondaryBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("SecondaryGenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CouponCodeEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.GiftCardEntity", "GiftCard")
                        .WithMany("CouponCodes")
                        .HasForeignKey("GiftCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GiftCard");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.LocalIdentityUser", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.UserEntity", "User")
                        .WithOne("AccountInfo")
                        .HasForeignKey("DataAccessLayer.Entities.LocalIdentityUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.CouponCodeEntity", "CouponCode")
                        .WithOne("Order")
                        .HasForeignKey("DataAccessLayer.Entities.OrderEntity", "CouponCodeId");

                    b.HasOne("DataAccessLayer.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CouponCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderItemEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.OrderEntity", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.ShopItemEntity", "ShopItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("ShopItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ShopItem");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.RatingEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.BookEntity", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.UserEntity", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ShopItemEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.BookEntity", "Book")
                        .WithOne("ShopItem")
                        .HasForeignKey("DataAccessLayer.Entities.ShopItemEntity", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.WishlistEntryEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.BookEntity", "Book")
                        .WithMany("WishlistEntries")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.UserEntity", "User")
                        .WithMany("WishlistEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AuthorEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookEntity", b =>
                {
                    b.Navigation("ShopItem")
                        .IsRequired();

                    b.Navigation("WishlistEntries");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CouponCodeEntity", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.GenreEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.GiftCardEntity", b =>
                {
                    b.Navigation("CouponCodes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderEntity", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PublisherEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ShopItemEntity", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserEntity", b =>
                {
                    b.Navigation("AccountInfo")
                        .IsRequired();

                    b.Navigation("Addresses");

                    b.Navigation("Orders");

                    b.Navigation("Ratings");

                    b.Navigation("WishlistEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
